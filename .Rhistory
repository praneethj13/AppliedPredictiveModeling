main = paste(colname, "skew", skewness(Data[colname])))
}
# colnames
colNam <- colnames(Data)
# Applying myplot function to all colnames
plots = lapply(unique(colNam), PlotSkew)
# gridExtra used for grid formation, usually par(mfrow) can be used
library(gridExtra)
# For smaller grids below code is used
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
lapply
is.numeric(Data)
is.numeric(Data[i])
is.numeric(Data[,1])
is.numeric(Data[,2])
for (i in 1:134){
print colNam[i]
for (i in 1:134)
print colNam[i]
printcolNam[1]
for (i in 1:134){
print colNam[1]
print colNam[1]
colNam[i]
print colNam[1]
colNam <- colnames(Data)
print colNam[1]
colNam[1]
for (i in 1:134){
colNam[i]
print is.numeric(Data[,i])
for (i in 1:134){
print(colNam[i])
print(is.numeric(Data[,i]))
}
print(colNam[i], 1)
for (i in 1:134){
print(colNam[i], 1)
print(is.numeric(Data[,i]))
}
for (i in 1:134){
print(colNam[i])
print(skewness(Data[, i]))
print(is.numeric(Data[,i]))
}
}
# Applying myplot function to all colnames
plots = lapply(unique(colNam), PlotSkew)
# gridExtra used for grid formation, usually par(mfrow) can be used
library(gridExtra)
for (i in 1:3){
print(colNam[i])
hist(data[,i],
main = paste("skew", round(skewness(data[,i]),2))
}
for (i in 1:3){
print(colNam[i])
hist(data[,i],
main = paste("skew", round(skewness(data[,i]),2)))
}
hist(data[,1])
hist(data[, 2])
hist(data[2])
for (i in 1:3){
print(colNam[i])
hist(Data[,i],
main = paste("skew", round(skewness(Data[,i]),2)))
}
for (i in 1:3){
print(colNam[i])
hist(Data[,i],
main = paste("skew", round(skewness(Data[,i]),2)),
xlab = paste(colName[i]))
}
for (i in 1:3){
print(colNam[i])
hist(Data[,i],
main = paste("skew", round(skewness(Data[,i]),2)),
xlab = paste(colNam[i]))
}
PlotSkew <- function(i){
hist(Data[,i],
main = paste("skew", round(skewness(Data[,i]),2)),
xlab = paste(colNam[i]))
}
hist(Data[,i],
main = paste("skew", round(skewness(Data[,i]),2)),
xlab = paste(colNam[i]))
}
# Applying myplot function to all colnames
test <-1:10
plots = lapply(test, PlotSkew)
plots = lapply(test, PlotSkew)
plots <- lapply(test, PlotSkew)
library(gridExtra)
# For smaller grids below code is used
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
library(ggplot2)
qplot(tpas, data=Data, geom="histogram")
qplot(tpsa, data=Data, geom="histogram")
qplot(tpsa, data=Data, geom="histogram", bin =5)
qplot(tpsa, data=Data, geom="histogram", bin =50)
qplot(tpsa, data=Data, geom="histogram", bin =10)
qplot(tpsa, data=Data, geom="histogram", bin =10, main =2)
qplot(tpsa, data=Data, geom="histogram", bin =10, main =xc)
qplot(tpsa, data=Data, geom="histogram", bin =10, main ="xc")
qplot(tpsa, data=Data, geom="histogram", bin =10, main =1"xc")
Data[tpsa]
Data$tpsa
PlotSkew <- function(ColName){
qplot(ColName, data=Data, geom="histogram", bin =10,
main = paste("skew", round(skewness(Data$ColName),2)))
}
# Applying myplot function to all colnames
colNam <- colnames(Data)
plots = lapply(colNam, PlotSkew)
# gridExtra used for grid formation, usually par(mfrow) can be used
library(gridExtra)
# For smaller grids below code is used
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving the Output in ml.pdf in the chapter directory
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
fix(plots)
PlotSkew <- function(ColName){
qplot(ColName, data=Data, geom="histogram", bin =10,
main = paste("skew", round(skewness(Data$ColName),2)))
}
colNam <- colnames(Data)
plots = lapply(uniques(colNam), PlotSkew)
plots = lapply(unique(colNam), PlotSkew)
# gridExtra used for grid formation, usually par(mfrow) can be used
library(gridExtra)
# For smaller grids below code is used
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving the Output in ml.pdf in the chapter directory
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
qplot(x_string, data=Data, geom="histogram", bin =10)
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
library(caret) # Loading caret library
data(BloodBrain) # Loading Data
Data <- bbbDescr
library(e1071)
library(ggplot2)
PlotSkew <- function(x_string){
qplot(x_string, data=Data, geom="histogram", bin =10)
}
colNam <- colnames(Data)
fix(colNam)
plots = lapply(unique(colNam), PlotSkew)
library(gridExtra)
# For smaller grids below code is used
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving the Output in ml.pdf in the chapter directory
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes(x=x_string))
m + geom_histogram()
}
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
fix(multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes(x=x_string))
m + geom_histogram()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(binwidth = 10)
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram() + geom_density()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density()
m + theme_minimal(base_size = 12, base_family = "")
}
plots = lapply(unique(colNam), PlotSkew)
plots[1]
plots[,1]
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density() + theme_minimal()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density()
+ theme_minimal()
}
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density(colour = red)
+ theme_minimal()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) + geom_density(colour = "red")
+ theme_minimal()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
lapply(unique(colNam) , skewness)
Data$tpsa
Data[, c]
k <- "tpsa"
Data$k
Data$k()
Data$k[1]
Data[,c(k)]
Data[,k]
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string),
main = paste("skew", round(skewness(Data[,xstring]),2)))
m + geom_histogram(aes(y = ..density..)) + geom_density() + theme_minimal()
}
colNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..),
main = paste("skew", round(skewness(Data[,xstring]),2)))
m + geom_density() + theme_minimal()
}
olNam <- colnames(Data)
plots = lapply(unique(colNam), PlotSkew)
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
# Creating a plot function
PlotSkew <- function(x_string){
m <- ggplot(Data, aes_string(x = x_string), main =2)
m + geom_histogram(aes(y = ..density..)) + geom_density() + theme_minimal()
}
colNam <- colnames(Data) # Getting all names of descriptors (columns)
plots = lapply(unique(colNam), PlotSkew) # Applying PlotSkew
# Creating Matrix Plots
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving Matrix Plots in PDF
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
chart_title <- round(skewness(Data[, x_string]),2)
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) +
geom_density() + theme_minimal()+ opts(title = chart_title)
}
colNam <- colnames(Data) # Getting all names of descriptors (columns)
plots = lapply(unique(colNam), PlotSkew) # Applying PlotSkew
# Creating Matrix Plots
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving Matrix Plots in PDF
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
PlotSkew <- function(x_string){
plot_title <- paste("Skew -", round(skewness(Data[, x_string]),2))
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) +
geom_density() + theme_minimal()+ labs(title = plot_title)
}
colNam <- colnames(Data) # Getting all names of descriptors (columns)
plots = lapply(unique(colNam), PlotSkew) # Applying PlotSkew
# Creating Matrix Plots
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving Matrix Plots in PDF
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
library(caret) # Loading caret library
data(BloodBrain) # Loading Data
Data <- bbbDescr
library(e1071)
library(ggplot2)
# Creating a plot function
PlotSkew <- function(x_string){
plot_title <- paste("Skew ", round(skewness(Data[, x_string]),2))
m <- ggplot(Data, aes_string(x = x_string))
m + geom_histogram(aes(y = ..density..)) +
geom_density() + theme_minimal()+ labs(title = plot_title, color = "blue")
}
colNam <- colnames(Data) # Getting all names of descriptors (columns)
plots = lapply(unique(colNam), PlotSkew) # Applying PlotSkew
# Creating Matrix Plots
multiplot <- do.call(marrangeGrob, c(plots, list(nrow = 3, ncol = 2)))
# Saving Matrix Plots in PDF
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs.pdf", multiplot)
nearZeroVar(Data)
NearZero <- nearZeroVar(Data) # 6 Variables
DataNoZeroVar <- Data(, -NearZero)
DataNoZeroVar <- Data[], -NearZero]
DataNoZeroVar <- Data[, -NearZero]
install.packages("psych")
library(psych)
cor.plot(DataNoZeroVar)
library(corrplot)
correlations <- cor(DataNoZeroVar)
correlations[1:8, 1:8]
correlations[1:8, 1:8] >0.5
corrplot(correlations, order ="hclust")
corrplot(correlations, order ="hclust")
Cairo_png(Chap3\Ex 3.3 BloodBrain\corr.plot,
width = 7, height = 7, pointsize = 10)
corrplot(correlations, order ="hclust")
library(cairoDevice)
Cairo_png(Chap3\Ex 3.3 BloodBrain\corr.plot,
Cairo_png("Chap3\Ex 3.3 BloodBrain\corr.plot",
Cairo_png("Chap3/Ex 3.3 BloodBrain/corr.plot",
width = 7, height = 7, pointsize = 10)
corrplot(correlations, order ="hclust")
install.packages("Cairo")
library(Cairo)
Cairo(600, 600, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
Cairo(1280, 800, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
Cairo(2280, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
Cairo(1500, 1300, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
0
corrplot(correlations, order ="hclust")
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot.png", type="png", bg="white")
corrplot(correlations, order ="hclust")
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust",
method = "square") # Correlation Plot
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust", col =wb,
method = "square") # Correlation Plot
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust", col = wb,
method = "square") # Correlation Plot
dev.off()
corrplot(correlations[1:50, 1:50],order="AOE",type="upper",tl.pos="d")
corrplot(correlations[1:50, 1:50],add=TRUE, type="lower", method="square",order="AOE",
diag=FALSE,tl.pos="n", cl.pos="n")
diag=FALSE,tl.pos="n", cl.pos="n")
corrplot(correlations[1:50, 1:50],add=TRUE, type="lower", method="square",order="AOE",
diag=FALSE,tl.pos="n", cl.pos="n")
dev.off()
corrplot(correlations[1:50, 1:50],add=TRUE, type="lower", method="square",order="AOE",
diag=FALSE,tl.pos="n", cl.pos="n")
corrplot(correlations[1:50, 1:50],order="AOE",type="upper",tl.pos="d")
corrplot(correlations[1:50, 1:50],add=TRUE, type="lower", method="square",order="AOE",
diag=FALSE,tl.pos="n", cl.pos="n")
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
res1 <- cor.mtest(DataNoZeroVar, 0.95)
corrplot(correlations, p.mat = res1[[1]], sig.level=0.2)
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot3.png", type="png", bg="white")
corrplot(correlations, p.mat = res1[[1]], sig.level=0.2)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot3.png", type="png", bg="white")
corrplot(correlations, p.mat = res1[[1]],
order ="hclust", insig = "blank", addrect=3)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot3.png", type="png", bg="white")
corrplot(correlations, p.mat = res1[[1]],
order ="hclust", insig = "blank", addrect=10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot3.png", type="png", bg="white")
corrplot(correlations, p.mat = res1[[1]],
order ="hclust", insig = "pch", addrect=10)
dev.off()
res1 <- cor.mtest(DataNoZeroVar, 0.95)
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot3.png", type="png", bg="white")
corrplot(correlations, p.mat = res1[[1]],
order ="hclust", insig = "blank", addrect=10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust",
method = "square") # Correlation Plot
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust",
method = "square", addrect = 5) # Correlation Plot
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust",
method = "square", addrect = 10) # Correlation Plot
dev.off()
DataTrans <- preProcess(DataNoZeroVar,
method = c("BoxCox", "center", "scale"))
DataTrans <- preProcess(DataNoZeroVar,
method = c("BoxCox", "center", "scale"))
for (i in 1:5){
skewness(DataNoZeroVar[, i])
skewness(DataTrans)
}
Transformation <- preProcess(DataNoZeroVar,
method = c("BoxCox", "center", "scale"))
head(Transformation[, 1:5])
fix(Transformation)
DataTrans <- predict(Transformation, DataNoZeroVar)
for (i in 1:5){
skewness(DataNoZeroVar[, i])
skewness(DataTrans[, i])
}
for (i in 1:5){
print(skewness(DataNoZeroVar[, i]))
print(skewness(DataTrans[, i]))
}
CorrTrans <- cor(DataTrans) # Correlation on Transformed data
# Correlation Plot
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust", addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrplot2.png", type="png", bg="white")
corrplot(correlations, order ="hclust", method ="square", addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans1.png", type="png", bg="white")
corrplot(corrTrans, order ="hclust", addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans1.png", type="png", bg="white")
corrplot(corrTrans, order ="hclust", addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans1.png", type="png", bg="white")
corrplot(CorrTrans, order ="hclust", addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans2.png", type="png", bg="white")
corrplot(CorrTrans, order ="hclust", method ="Square",
addrect = 10)
dev.off()
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans2.png", type="png", bg="white")
corrplot(CorrTrans, order ="hclust", method ="square",
addrect = 10)
dev.off()
# Correlation Plot 3
resTrans1 <- cor.mtest(DataTrans, 0.95)
Cairo(2000, 1800, file="Chap3/Ex 3.3 BloodBrain/corrTrans3.png", type="png", bg="white")
corrplot(CorrTrans, p.mat = resTrans1[[1]],
order ="hclust", insig = "blank", addrect=10)
dev.off()
colNam2 <- colnames(DataTrans) # Getting all names of descriptors (columns)
plots2 = lapply(unique(colNam2), PlotSkew) # Applying PlotSkew
# Creating Matrix Plots
multiplot2 <- do.call(marrangeGrob, c(plots2, list(nrow = 3, ncol = 2)))
# Saving Matrix Plots in PDF
ggsave("Chap3/Ex 3.3 BloodBrain/Hist graphs_Trans.pdf", multiplot2)
highCorr <- findCorrelation(corrTrans, cutoff = .75)
highCorr <- findCorrelation(CorrTrans, cutoff = .75)
length(highCorr)
highCorr <- findCorrelation(CorrTrans, cutoff = .5)
length(highCorr)
